'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':1,'href':'/posts/new-gnome-kr-site/','title':"그놈 한국 사이트 개편 안내",'section':"News",'content':"지금까지 구글 사이트를 통해 그놈 한국 웹사이트를 제공했는데, 이번에 새롭게 자체 홈페이지를 구축했습니다.\n이전 사이트를 계속 접속 가능합니다.\n https://sites.google.com/site/gnomekr/home  고맙습니다.\n"});index.add({'id':2,'href':'/posts/archive_2001_0804_linux_programing_by_example/','title':"Linux Programming by example",'section':"News",'content':"출처\n 글쓴이 : 키눅스 (2001년 08월 04일 오후 12:57) 읽은수: 319 [ 문서 / 책소개 ] 제목 : Linux Programming by Example 저자 : Wall Kurt 출판사 : Que  제가 표지 디자인을 무척 맘에 들어하는 책입니다. 그동안 사놓고 보지 않고 있다가.. 어제부터 보기 시작했는데.. 내용이 정말 좋더군요. C 언어를 어느정도 아신다면 리눅스 프로그래밍에 대한 개념및 실전 응용을 하는데 많은도움이 될 것 같습니다.(원서지만 영어도 그리 어렵지 않게.. 쉽게 읽어갈수 있습니다.)\n이 책은 C언어를 중심으로 설명하고 있어 리눅스 시스템 프로그래밍과 어플리케이션 개발의 특화된 리눅스 프로그래밍 관련 지식이 없더라도 쉽게 접근할 수 있다.\nhttp://www.wowbook.com/computer/book/info/book_detail.asp?isbn=ISBN0-7897-2215-1\n(출판사와 서점과는 아무 관계가 없읍니다.)\n프로그램세계 2000년 2월호 에서의 리뷰 #  주로 GNU 개발 툴, 시스템 프로그래밍, 리눅스에서의 파일 처리, 인터프로세스 통신, 네트워크 프로그래밍과 애플리케이션 인터페이스, X윈도우 프로그래밍, 디버깅과 메모리 관리, 소프트웨어 버전 컨트롤 및 배포에 관한 주제들을 다룬다.\n총 6부 22장으로 구성된 이 책은 1부에서 리눅스 프로그래밍 환경에 대한 제반 사항과 GNU make를 사용한 프로세스 생성 및 컨트롤 등을 설명하고 있다. 2부에서는 시스템 프로그래밍에 대한 내용으로 프로세스, 시그널, 시스템 호출, 고급 파일 처리 기법 등에 대해 예제 프로그램을 기반으로 설명한다. 3부에서는 리눅스 API와 관련된 주제로 데이터베이스 API, ncurses로 화면 조작, 고급 ncurses 프로그래밍, 사운드 API 등에 대해 기술하고, 4부에서는 파이프와 FIFO, 메모리 공유, 세마포어와 메시지 큐 등 인터프로세스 통신에 대한 내용을 설명하고 있다. 5부와 6부에서는 리눅스 프로그래밍 유틸리티로 디버깅 툴을 사용하는 방법, 소프트웨어 분산, 소스 코드 변환 추적 등에 대해 \u0026lsquo;Music CD 데이터베이스\u0026rsquo;라는 프로젝트를 통해 실습하고 있다.\n전체적으로 리눅스 환경에서 빠르게 프로그래밍 작업을 하는데 필요로 하는 것을 예제를 중심으로 기본기에 입각하여 제시하고 있는 책으로 강력한 리눅스 OS를 개발할 수 있도록 리눅스 프로그래밍의 환경을 사용자 정의 양식으로 조정할 수 있는 힘을 부여하고 있다. 이 책은 C언어를 중심으로 설명하고 있어 리눅스 시스템 프로그래밍과 어플리케이션 개발의 특화된 리눅스 프로그래밍 관련 지식이 없더라도 쉽게 접근할 수 있다.\n주로 GNU 개발 툴, 시스템 프로그래밍, 리눅스에서의 파일 처리, 인터프로세스 통신, 네트워크 프로그래밍과 애플리케이션 인터페이스, X윈도우 프로그래밍, 디버깅과 메모리 관리, 소프트웨어 버전 컨트롤 및 배포에 관한 주제들을 다룬다.\n총 6부 22장으로 구성된 이 책은 1부에서 리눅스 프로그래밍 환경에 대한 제반 사항과 GNU make를 사용한 프로세스 생성 및 컨트롤 등을 설명하고 있다. 2부에서는 시스템 프로그래밍에 대한 내용으로 프로세스, 시그널, 시스템 호출, 고급 파일 처리 기법 등에 대해 예제 프로그램을 기반으로 설명한다. 3부에서는 리눅스 API와 관련된 주제로 데이터베이스 API, ncurses로 화면 조작, 고급 ncurses 프로그래밍, 사운드 API 등에 대해 기술하고, 4부에서는 파이프와 FIFO, 메모리 공유, 세마포어와 메시지 큐 등 인터프로세스 통신에 대한 내용을 설명하고 있다. 5부와 6부에서는 리눅스 프로그래밍 유틸리티로 디버깅 툴을 사용하는 방법, 소프트웨어 분산, 소스 코드 변환 추적 등에 대해 \u0026lsquo;Music CD 데이터베이스\u0026rsquo;라는 프로젝트를 통해 실습하고 있다.\n"});index.add({'id':4,'href':'/docs/develop/architecture/','title':"Architecture",'section':"Develop",'content':"작성 중입니다.\n그놈(GNOME) 플랫폼 아키텍쳐 개관 #  (그놈 홈페이지의 Architecture Overview (http://developer.gnome.org/arch/) 를 바탕으로 작성되었습니다.) 이 페이지에서는, 그놈(GNOME) 플랫폼에서 사용하는 구조/기술들에 대한 내용을 다루게 됩니다. 아래의 내용을 바탕으로, 전체적인 그놈 데스크탑 환경의 배경이 되는 아키텍쳐를 이해하여 사용자 / 어플리케이션 개발자들이 어떠한 방향으로 접근해나가야 할 것인지에 대한 사항을 다루게 됩니다.\nGTK+에 대하여 #  GTK+ 는 그놈(GNOME)이 사용하는 기본 위젯 툴킷(base widget toolkit, 주: 버튼, 스크롤바, 입력창등이 위젯에 해당합니다) 라이브러리 입니다. 원래 GIMP 프로젝트로부터 파생되었고, 대부분의 코드는 C로 작성되었지만 수많은 언어 바인딩을 지원, C++, Python, PHP 등에서도 사용할 수 있습니다.\nGlib 에 대하여 #  GLib 라이브러리는, C 언어에서 보다 더 편리한 기능적 요소를 제공해주고 있습니다. GLib은 GTK+ 를 포함, 그놈(GNOME) 프로젝트의 많은 프로그램 구석구석에서 사용됩니다. GNOME에서는 GLib을 사용하는 것으로 다음의 4가지 기능을 얻을 수 있었습니다: 이식성(Portability), 편리한 함수들, 제너릭한 데이터 구조들, 그리고 GLib main loop 까지. 그런데, 이렇게만 설명해서는 감이 안올 수 있으니 각 부분을 좀 더 풀어서 언급하도록 하죠.\n첫째, 이식성(Portability)에 대한 사항을 들어보자면, 몇몇 C 라이브러리에서는 제공하지만, 또 다른 몇몇 C 라이브러리에서 제공하지 않는 함수들을 제공합니다. 예를 들어볼까요? GLib에는 g_ascii_strcasecmp() 와 g_memmove() 같은 함수가 있습니다. 같은 기능을 하는 함수가 glibc에도 있습니다. strcasecmp() 와 memmove() 가 똑같은 기능을 제공합니다. 만약 기본 C 라이브러리로 glibc를 사용하는 플랫폼이라면 g_ascii_strcasecmp() 와 g_memmove()를 호출시 glibc로 구현되어 있는 함수의 wrapper 역할을 하게 될테지만, 저런 함수를 제공하지 않는 C 라이브러리를 사용하는 플랫폼이라면, 앞의 두 함수를 호출 시 GLib에서 이식성있게 새로 구현해놓은 코드를 사용하게 합니다. 이런 라이브러리를 사용하는 것으로, 프로그래머가 여러가지 플랫폼을 위해 신경쓰는 일을 줄여줄 수 있습니다.\n둘째, GLib은 몇몇 특정 함수를 통해 C를 더욱 편리하게 쓸 수 있게 해줍니다. 예를 들어볼까요? GLib의 날짜 관련 함수 중에, g_date_set_parse() 라는게 있습니다. 흔히 일반적이라고 생각하는 날짜 기록방식대로 문자열을 만들어 던져주면, 로케일 등을 따져서 날짜를 내부에서 사용하기 편한 자료 구조로 만들어줍니다. 그 밖에도, 문자열을 다루거나, 로그 나 디버그 메시지 출력 / 관리에 대해 유연하게 처리할 수 있게 해줍니다.\n세번째로는 제너릭한 자료 구조를 GLib에서 제공받을 수 있습니다. Linked List 라던지, 해시 테이블, Balanced 2진 트리, 가변 배열과 같이 비교적 정형화된 자료 구조를 사용하기 위해 바닥부터 코드를 만들 필요가 없다는 장점이 생깁니다. GLib에서 제공해주는 함수만으로도, 해당 자료 구조를 자유롭게 수정, 추가, 삭제, 탐색할 수 있습니다. 조건에 따라 변화할 수 있는 해시 테이블 같은 자료 구조는, 자기가 원하는 행동을 담은 콜백 함수를 연결할 수 있는 정형화된 인터페이스를 제공해줍니다.\n마지막으로는 GLib main loop를 네번째로 들었는데, 이 추상적인 단어는 확장성이 충분히 고려된 이벤트 loop을 정형화된 형태로 제공한다는 것을 의미한다고 설명드릴 수 있습니다. 타이머라던지, 입출력 콜백, 그리고 idle 상태 감지와 같이 일반적으로 사용되는 이벤트 발생원을 포함해서, X Window System의 이벤트와 같이 외부의 이벤트 발생원으로부터 나오는 이벤트들을 일관적인 형태로 처리할 수 있습니다. 이것을 통해 GTK+ 가 이벤트 기반의 위젯 컨트롤이라던지, 각종 이벤트 / 시그널 처리를 할 수 있는 기반을 마련하게 됩니다. 예를 들어볼까요? 눈에 보이는 것을 들어보자면, 마우스를 움직여 스크롤 바를 내린다던지, 마우스 오른쪽 버튼을 팝업 메뉴를 띄우는 것도, X 로부터 발생하는 이벤트를 넘겨받아 프로그래머가 의도한 대로 처리하게 하는 것입니다. 이해를 돕기위해 눈에 보이는 것을 예로 들었지만, GLib에서는 눈에 보이건, 보이지 않건 상관없이 동일한 이벤트 loop을 사용해서 이벤트 기반의 프로그램을 만들 수 있습니다.\nGLib에 대해서 추가적으로 알고 싶으시다면, GLib 2 API 매뉴얼을 참고하시길 권장합니다.\nGTK+ 객체 시스템(Object System)에 대하여 #  앞에서 언급했듯이, GTK+는 객체 지향 프로그램을 위한 특별한 지원이 없는 C로 작성되었지만, GTK+ 의 디자인은 객체 지향을 중심으로 이루어져있습니다. 소위 객체지향의 전통적인 기능들인 상속(Inheritance), 다형성(Polymorphism), 레퍼런스 카운팅(Reference counting) 은 물론이고, 위젯 툴킷에 적합한 기능- 즉, 알림(Notification)을 위한 시그널 처리 시스템을 포함해서, 객체 속성(Attribute) 시스템과 같은 것으로 구성되어있습니다. 이러한 기능을 바탕으로, GTK+ 객체 시스템이라는 하나의 계층(layer)로 자리잡고 있습니다.\nGTK+ 객체 시스템에 포함된 상속 기능은 서로간의 Nesting Structure (주: 구조체 내에서 구조체를 멤버 변수로 사용함)를 통해 만들어졌습니다. 예를 들어 설명해볼까요? GtkButton 클래스는 GtkWidget 클래스로부터 상속을 받습니다. 이렇게 될 경우, GtkButton 구조체의 첫번째 부분은, 바로 GtkWidget 구조체가 되는 것입니다. 이 말은 GtkButton을 가르키는 포인터가 GtkWidget을 가르키는 포인터로 타입 캐스팅될 수 있다는 것이 됩니다. 각각의 클래스는 \u0026ldquo;각자의 클래스 함수 구현을 가르키는 함수 포인터가 모인 테이블\u0026quot;을 포함하는 방식을 통해, 부모 클래스로부터 오버라이딩을 할 수 있게 합니다. (예를 들자면, GtkWidgetClall 구조체가 draw() 함수를 가르키는 포인터를 가지고 있게 되면, GtkButtonClass는 자신을 그리는 구현체(Implementation)만 제공하는 것으로 버튼을 그릴수 있다는 겁니다.)\n각 GTK+ 객체 클래스는 관련된 시그널의 집합체를 가지고 있습니다. 각각의 시그널은 특정한 형태의 이벤트나, 어플리케이션에서 호출(Callback)을 할 수 있는- 소위 \u0026ldquo;발생\u0026quot;의 의미를 가집니다. 예를 들어볼까요? GtkButton 클래스는 \u0026ldquo;clicked\u0026rdquo; 라는 시그널을 제공하는데, 이 시그널은 사용자가 그 버튼 위젯을 눌렀을 때 발생(주: 영문으로는 Emission, Emitted 라는 표현을 사용합니다)하게 됩니다. 하나의 시그널에는 여러개의 Callbacks가 연결될 수 있고, 시그널이 방출될 경우에는 연결되어 있던 모든 Callback을 향해 보내지게 되어, 이들을 순서대로 호출하게 될 것입니다. 시그널은 또한, 위젯의 행동을 변화시키는 데에도 사용될 수 있습니다. 예를 들자면, GtkEntry 위젯의 \u0026ldquo;insert_text\u0026rdquo; 시그널에 콜백 함수를 연결하게 될 경우, 숫자만 입력되게 한다던지, 또는 특정 문자만을 입력하게 한다던지 등의 필터링을 할 수 있는것 처럼 말이죠.\n각각의 클래스는 자신과 관련된 인자(arguments)의 집합을 가지고 있습니다. 각각의 인자는 그 위젯이 가진 몇몇 특성을 표현할 수 있습니다. 예를 들자면, GtkLabel 위젯은 \u0026ldquo;label\u0026rdquo; 이라는 인자를 제공하여, 그 위젯에 들어갈 임의의 텍스트를 설정하게 하거나, \u0026ldquo;justify\u0026rdquo; 인자를 제공하여 레이블의 자리맞춤을 하게 할 수도 있는것 처럼 말입니다. 이러한 인자 시스템은 실행 시간대(run-time)에 동적으로 적용될 수 있다는데 그 장점이 있습니다. 쉽게 말하자면, 앞으로 어떤일이 벌어지는지 알 필요 없이, 몇몇 인자를 설정하는 것으로 상황에 맞는 인터페이스를 제공할 수 있게 된다는 것입니다.\n http://kldp.org/node/31629 에서, GTK+ Object System 에 관련된 토론기록을 보실 수 있습니다. comp.os.linux.advocacy 메일링 리스트에서 벌어진 GTK+ Object System 관련 토론기록을 보실 수 있습니다.  GDK 에 대하여 #  GDK 라이브러리는 GTK+ 위젯(어플리케이션)과 윈도우 시스템을 이어주는 추상적 계층을 제공해줍니다. 다르게 말하자면, 무언가 화면에 그려줘야 할 것이 있다던지, 혹은 이벤트를 핸들링하고자 할 때 어플리케이션이 X 윈도우 시스템에 직접 호출을 하는 것이 아니라, GDK를 호출하여 처리하게 합니다.\n윈도우 시스템과 어플리케이션 사이의 추상적인 계층은 여러가지 이점을 가져옵니다. 첫번째, 이식성(Portability)를 높일 수 있습니다. GTK+ 를 X 윈도우 시스템이 아닌 다른 윈도우기반 시스템 (DirectFB, Win32 등등) 에 포팅하는데는 GDK 계층을 옮기는 것만으로 해결 할 수 있습니다. 일례로, 마이크로소프트사의 Windows 환경으로의 포팅은 이미 끝난 상태입니다. 게다가 GTK+ 프로그램이, 존재할지, 안할지 모르는 X 확장(extensions)에 투명성있게 접근할 수 있는 기반을 제공해줍니다. 마지막으로, GDK 호출은 X 호출에 비에 응답하기 간편합니다. 평소에 거의 사용되지 않는 파라미터 값을 주지 않아도, 다른 파라미터 값에 맞는 적절한 값을 자동적으로 결정해주기도 합니다.\nGDK 2 API 레퍼런스 문서를 통해 GDK에 대한 더욱 상세한 내용을 보실 수 있습니다.\nDrag and Drop (DND)에 대하여 #  드래그 앤 드롭(Drag and Drop, aka DND)을 사용해서 정보를 옮기는 것은, 대부분의 현대적인 사용자 인터페이스에서 가능한 일입니다. 사용자가 마우스를 가지고 원본(source)을 클릭하여, 옮길 곳(destination)으로 끌고 갈(drag)수 있습니다. 아이콘은 사용자에게 행동에 대한 피드백을 위해 보여지는 것입니다. GTK+ 는 사용하기 쉽고, 프로그래머가 자신이 충분이 원하는 대로 바꿀 수 있는 드래그 앤 드롭 기능을 일련의 인터페이스를 통해 제공합니다. 이 인터페이스들을 사용하는 것으로 어플리케이션은 모티프(Motif, 주: POSIX - Compliant 시스템에서 동작하는 그래피컬 위젯 툴킷.)나 Xdnd 드래그 앤 드롭 프로토콜을 지원하는 프로그램들과 상호 연계될 수 있습니다.\nGTK+ 인터페이스는 원본(source)과 목표지점(destination) 관점이라는 2개의 부분으로 나뉘어져있습니다. 그 두개의 관점에서도 드래그 앤 드롭 행동의 세부적인 커스토마이징이 가능한 저수준(low-level) 인터페이스와, 일반적인 형태의 드래그 앤 드롭을 비교적 간단한 코드를 통해 구현하는 고수준(high-level) 인터페이스로 구분을 할 수 있습니다.\n내부적으로, GTK+는 전통적인 Motif 의 드래그 앤 드롭 프로토콜과, 새로운 Xdnd 드래그 앤 드롭 프로토콜을 지원합니다. 어플리케이션을 만드는 프로그래머의 입장에서는 특별한 노력없이, Xdnd 프로토콜(일례로, Qt와 Star Office가 Xdnd 프로토콜을 지원합니다)과 이미 많은 수를 차지하는 Motif 프로토콜을 사용하는 어플리케이션과 상호작용이 가능합니다. (다른말로 이야기 하자면, 투명성을 가지고 있다는 뜻입니다)\nXdnd 프로토콜은 전송되는 데이터의 타입을 MIME 타입으로 취급합니다. 이 관습은 그놈(GNOME) 프로젝트 전체에 적용되어 있습니다.\nDrag-and-Drop in GTK+ and GNOME. (영문) 이 링크를 통해 GTK+ 와 GNOME에서 사용된 드래그 앤 드롭 개관을 살펴 볼 수 있습니다.\n GTK+ API 레퍼런스 - Drag and Drop 페이지에서, 고수준 인터페이스의 상세를 알 수 있습니다. GDK API 레퍼런스 - Drag and Drop 페이지에서, 드래그 앤 드롭의 저수준 인터페이스 상세를 알 수 있습니다.  테마 (Themes) 에 대하여 #  GTK+는 테마를 통해 사용자 인터페이스의 커스토마이징을 지원합니다. GTK+ 나 어플리케이션을 재 컴파일 할 필요없이, 사용자는 단순히 새로운 테마를 설치하는 것 만으로도 어플리케이션의 새로운 모습을 선택할 수 있습니다. 테마는 단순히 색상의 집합뿐만 아니라, 현존하는 드로잉 코드에서 사용되는 그림(pixmap)만 추가/변경하거나, 위젯을 그리는 기능 자체를 완전히 바꿀 수 도 있습니다. GTK+ 에서 테마가 어떻게 동작하는지를 이해하기 위해서는 몇가지의 개념이 필요합니다. 첫째로, 스타일(style)은 각각의 위젯을 어떻게 그리느냐에 대한 정보의 집합을 의미합니다. 색상에 대한 정보, 배경에 들어갈 그림, 위젯에 들어갈 글꼴 등이 이들에 해당합니다. 스타일은 또한, 위젯의 기본 구성품을 어떻게 그리는지에 대한 코드가 들어있는 공유라이브러리인 \u0026ldquo;테마 엔진(theme engine)\u0026ldquo;을 가르키는 포인터를 포함합니다. (그림자 들어간 박스, 프레임, 화살표, 체크 버튼 표시부 등등이 위젯의 기본 구성품에 포함됩니다) 배포판마다 그 이름은 대개 다르지만, gtk-engines-* 라고 들어가는 패키지들이 이들 테마 엔진입니다.\n어플리케이션의 색상, 글꼴, 그리고 위젯을 위해 사용되는 테마 엔진등은 리소스 파일(resource file)로 설정됩니다. 리소스 파일에는 특정 테마 엔진에 관련된 데이터를 포함할 수도 있으며, 최종적으로 테마는 리소스 파일과 그림 파일과 같이 필요한 파일들의 조합으로 이루집니다.\n그놈(GNOME) 에서는 일관된 테마의 배포를 위해 표준 파일 형식을 정의하고 있습니다. 이들 기준을 간략하게 살펴보면, 테마파일은 테마의 이름으로 된 디렉토리가 들어있는 타르볼(주: .tar, .tar.gz 와 같이 tar로 묶여있는 파일)이어야 하며, 이 디렉토리의 내부에는 README.html 파일과, PNG 형식의 아이콘인 ICON.png 파일, 그리고 각각의 테마 정보가 들어있는 하위디렉토리가 존재해야 합니다. GTK+ 테마 정보는 반드시 gtk 라는 이름의 하위디렉토리에, 리소스 파일은 gtkrc 라는 이름으로 들어가 있어야 합니다.\n GTK API 레퍼런스 : Resource Files 페이지에서 리소스 파일에 대한 레퍼런스를 보실 수 있습니다. GTK API 레퍼런스 : Styles 페이지에서 스타일에 대한 레퍼런스 매뉴얼을 보실 수 있습니다. GTK API 레퍼런스 : Themeable Stock Icons 페이지에서 스톡 아이콘에 대한 레퍼런스 매뉴얼을 보실 수 있습니다.  출처\n"});index.add({'id':5,'href':'/docs/develop/begin/','title':"Begin",'section':"Develop",'content':"처음 시작하시는분을 위한 가이드 #  이 페이지에서는, 그놈(GNOME) 데스크탑 환경을 기반으로 하는 소프트웨어의 개발이나, 그놈(GNOME)을 더욱 풍성하게 만들어주는 공헌을 해주실 분을 위한 기초적인 가이드라인을 제시합니다.\n그놈(GNOME) 프로그램 개발 개요 페이지를 통해, 그놈(GNOME) 데스크탑 환경을 구성하는 핵심 기술과, 내부 통신 방법, 데스크탑 편의성을 위한 기술등에 대해 학습하실 수 있습니다.\n그놈(GNOME) 데스크탑 환경에 공헌할 수 있는 방법들에 대한 요약 #  프로그래밍에 대한 지식이 필요없이, 아래와 같이 그놈(GNOME) 데스크탑 환경의 발전에 도움을 주실 수 있습니다:\n여러분이 사용하시는 그놈(GNOME) 플랫폼의 소프트웨어에 대한 문제를 발견하거나, 좀 더 나은 방향으로의 변화를 위하여 그놈 버그 트래커를 통해 버그를 보고할 수 있습니다. 버그 보고에 대한 자세한 사항을 버그 보고 방법(영문) 문서를 통해 알 수 있습니다.\n그놈(GNOME) 플랫폼에서 동작하는 소프트웨어들의 메뉴나, 대화창에 적혀있는 메시지나, 프로그램 사용에 도움을 주는 문서들을 작성하거나, 번역하는 것으로도 도움을 줄 수 있습니다. 어렵게 생각하지 마세요! 그놈 한국 irc 채널에 오시면 그것에 관련된 대화를 접하시고, 도움을 주시는데 보다 손쉬운 방법을 알 수 있습니다.\n프로그래밍에 대한 지식이 있으시다면, 다음과 같은 방법으로 도움을 주실 수 있습니다:\n현재 그놈(GNOME) 프로젝트의 진행 상태는 여기에서 보실 수 있습니다. 언급한 페이지에는 현재 진행중이거나, 또는 개선해야 할 사항 (TODO)과 함께 그놈 프로젝트의 여러가지 컴포넌트의 개발에 관련된 연락처 등을 다루고 있습니다. 이곳을 통해, 지금 어디에, 어떤 것을 도울 수 있는지 손쉽게 알 수 있습니다.\n그 밖에도, 여러가지 컴포넌트들에 대한 테스트, 또는 버그 보고등을 통해서도 도움을 줄 수 있습니다. 최신의 그놈(GNOME) 프로젝트의 컴포넌트들을 GNOME gitlab를 통해 접근할 수 있습니다.\n그놈 개발 환경의 발전을 위해, 그놈 문서화 프로젝트에도 참여하실 수 있습니다.\n그놈 개발자 플랫폼 라이브러리(API) 문서에 대하여 #  API 문서를 보기 위해, 첫째로 DevHelp를 사용하는 방법이 있습니다. 이 프로그램을 사용하여, 자신이 사용하는 현재 버전의 라이브러리에 대한 문서를 읽고, 검색할 수 있습니다. 또한, API 참고서 웹 페이지를 통해 그놈(GNOME) 플랫폼 기반의 프로그램을 작성하는데 도움을 줄 수 있는 최신 API 문서를 만나실 수 있습니다.\n기타 도움을 받을 수 있는 문서에 대하여 #  라이브러리 API에 대한 문서이외에도, 그놈 개발 안내서 와 초보자 지침서 및 예제 코드를 통해 좀 더 손쉽게 그놈(GNOME) 프로그래밍을 배울 수 있습니다.\n알림: 이 글은 원본 글을 수정한 것입니다.\n"});index.add({'id':6,'href':'/docs/develop/i18n/','title':"I18n",'section':"Develop",'content':"작성 중입니다.\n"});index.add({'id':7,'href':'/docs/develop/tools/','title':"Tools",'section':"Develop",'content':"작성 중입니다.\n"});index.add({'id':8,'href':'/docs/gnome_history/gimp_gtk/','title':"Index",'section':"Docs",'content':"그놈 프로젝트는 김프라는 그림 편집 및 그리기 도구 개발에서 시작한다. 아래 만화를 통해 김프 프로젝트의 시작과 김프에서 어떻게 Gtk+ 프로젝트가 시작되었는지 확인할 수 있다.\n김프(GIMP)의 탄생 #  1995년 스펜서 킴벨(Spencer Kimball)과 피터 매티스(Peter Mattis)는 UC 버클리에서 전산학을 공부하고 있었다.\n“LISP 컴파일러 과제 시작했어?”\n“컴파일러 보다 다른 것을 만들어보고 싶어.”\n“나도, 대신에 리눅스용 포토샵 같은거 만들어보면 어떨까? 포토샵은 맥하고 윈도에서만 실행되잖아.”\n“좋은 생각이다. 우리 교수님한테 한번 이야기해보자.”\n“저희가 LISP 컴파일러 프로젝트 대신에 포토샵 같은 이미지 편집 프로그램을 한번 만들어보고 싶습니다.”\n“교수님도 유닉스 쓰고 있잖아요? 그런데, 포토샵 같은 이미지 편집 프로그램이 없어요. 저희가 한번 만들어보고 싶습니다.”\n“음.. 좋은 생각이네. 대신 윈도용 그림판 수준으로 만들면 C 밖에 못줘.”\n“포토샵에 보면 클릭만 하면 자동으로 비슷한 색깔 영역이 선택되잖아? 그거 신기한데, 그걸 구현하면 내가 A+를 주지.”\n“아, 네 물론이죠.”\n“그 기능이 뭔지 알어?”\n“뭔데?”\n“포토샵을 그냥 구현하라는 말씀이야.”\n두 사람은 이미지 편집 프로그램 이름을 김프 GIMP(General Image Manipulation Program)라고 짓고, 거의 10개월 정도 개발에 몰두한다.\n“이제 김프를 공개해도 될 것 같아.” “플러그인도 지원하고, 교수님이 이야기한 자동 영역 선택 기능도 있고, 그림 그리기 도구에에 채널까지.” “게다가 포토샵에 없는 다단계undo/redo 기능까지.”\n1996년 김프 0.54가 소스코드와 함께 공개되었고, 리눅스, SGI-IRIX, HP 유닉스를 지원했다. 주요 기능은 다음과 같다.\n 8, 15, 16, 24 비트 컬러 지원 8 비트 디스플레이를 위한 디더링(dithering) 지원 RGB, 흑백, 인덱스 컬러로 그림 보기 지원 동시 여러 이미지 파일 편집 가능 실시간 줌(zoom)과 스크롤 지원. GIF, JPEG, PNG, TIFF, XPM 이미지 포맷 지원 사각형, 타원형, 자유, 퍼지(fuzzy), 베지어(bezier), 자동 선택 도구를 이용한 영역 선택 지원 회전, scale, shear and flip images. bucket, brush and airbrush painting tools 이미지 복사, convolve, 블렌딩 지원 텍스트 툴, 필터 효과(blur와 edge detect), 지원 채널과 컬러 조작 지원(add, composite, decompose). 플러그-인 시스템 지원 (새로운 파일 포맷 및 새로운 필터 추가 가능). 다단계 undo와 redo 지원 김프가 공개되지 마자, 수 많은 사용자들이 생겨났다.  “리눅스에서 이미지를 편집할 수 있다니… 감동”\n“와, 기능이 거의 포토샵 수준이라니까…”\n“사람들이 플러그인도 많이 만들어서 이미지 필터 효과도 아주 많네.”\n당시 김프 사용자였던 자흐 빈(Zach Beane)는 자신의 홈페이지에 사용자 튜토리얼을 만들어 공유했다.\n다른 사용자들도 김프로 만든 작품과 자신만의 테크닉을 공유했고. 이를 통해 더 많은 사람들이 김프를 사용하기 시작했다.\n“내가 김프 튜토리얼을 만들어봐야겠다.”\n당시 튜토리얼 페이지 일부(출처: archive.org)\n리눅스 마스코트 펭귄 턱스 레리 이윙(Larry Ewing)은 김프 0.54 버전을 이용해서 리눅스 마스코트인 펭귄 턱스(tux)를 그렸다.\n“리눅스 로고 컨텐스트가 있네. 주제는 펭귄! 리눅스가 자유 소프트웨어이니까, 김프로 한번 펭귄을 그려보자.”\n레리가 작업하던 김프 화면(출처: 레리 홈페이지)\n사람들의 투표로 레리가 그린 펭귄이 선정되었지만, 로고 대신 리눅스 마스코트로 현재까지 사용되고 있다. 당시에 이 그림이 김프로 그려진 사실 때문에 김프가 많은 조명을 받았다.\nGTK 위젯 #  하지만, 사용자들이 플러그인을 추가하면서 김프가 불안해지는 현상이 나타났다.\n“큰일이네. 플러그인 떄문에 자꾸 김프가 죽는다고 하네.”\n“모티프(motif) 때문에 플러그인 기능이 불안정한 것 같아.”\n“김프가 상용 위젯인 모티프에 의존성이 있는 것도 문제야.”\n“내가 위젯을 만들어볼까? 그래야 사람들이 리눅스에서도 쉽게 사용할 수 있지.”\n“어떻게?”\n“위젯과 윈도우 시스템이 연동하는 부분은 분리하는거야. 그래야 나중에 다른 플랫폼에 쉽게 포팅할 수 있지.”\n나중에 위젯은 GTK(GIMP toolkit)로, 윈도 시스템과 연동하는 포팅 레이어는 GDK(GIMP drawing kit)로 부르게 된다. 이때 부터 피터는 주로 위젯을 개발하고 스펜서는 김프 자체에 주력한다.\n“나 HP로 부터 오퍼 받았어.” “축하해.. 당분간 밤낮없이 일해야겠는데? 툴킷도 완성시켜야하고.”\nGPL 적용 #  “오~ 기특한 두 젊은이기 포토샵 대체 프로그램을 만들었다니, 이름도 김프(GIMP). G가 General이긴하지만… 메일을 하나 보내야겠다.”\n“대단한 이미지 편집 도구를 만드셨네요? 혹시 GPL 라이선스로 공개할 생각은 없나요?\n“네, 현재 모티프 의존성을 없애는 작업을 하고 있습니다. 그러면 GPL로 코드를 공개할 수 있을 것 같습니다?”\n“오.. 대단합니다. 혹시 이름에서 G를 GNU로 바꿀 생각은 없는지요?”\n“네, 물론이죠. 저희도 이맥스 에디터를 잘 쓰고 있고 GCC, 리눅스와 같은 자유 소프트웨어 덕에 이렇게 김프도 만들었는데…”\n“정말 생각이 바른 젊은이들야. 이로써, 포토샵을 대신할 새로운 자유 소프트웨어 확보!” “이제 부터 GNU Image Manipulation Program로 불러주세요~”\n1997년 6월 김프 0.60이 릴리즈 되었다. 더 이상 모티프 툴킷에 대한 의존성이 없었고 처음으로 GPL 라이선스가 적용되었다.\n“모티프 의존성이 없으니, 개발도 쉽고 배포도 자유로워졌네.”\n“그런데, 사람들이 이제 윈도 버전을 만들어달라고 하네”\n“기술적으로 GDK 윈도 백엔드를 구현하면 되는데, 난 이제 취직도 했으니, 누군가 구현하지 않을까? 오픈소스니까..”\n1998년 토어 릴크비스트(Tor Lilqvist)가 드디어 김프를 윈도용으로 포팅하기 시작한다.\n“김프 만든 사람들 천재군. 어떻게 위젯을 따로 다 만들었지? 게다가 포팅하기 쉽게 GDK로 포팅 레이어를 분리해놨어. 윈도용 포트 작업이 수월하겠는데..”\n1997년 2월 26일 두 사람은 김프 0.99 버전을 릴리스 한다. 이때 부터 GTK에 객체지향(OOP) 개념을 추가해서 GTK+라고 부르기 시작했다. 1997년 6월 9일 0.99.10을 마지막으로 두 사람 모두 취직을 하면서 더 이상 개발을 진행하지 못하게된다.\n“김프 새 버전은 안나오는거야?”\n“두 사람이 모두 직장을 잡아서 새롭게 릴리즈할 시간이 없는 것 같아.”\n“누군가 대신에 버그도 잡고 릴리즈도 하면 좋은데…”\n페데리코(Federico Mena Quintero)는 여러 버그 픽스를 모아서 간헐적으로 릴리즈를 진행했다. 하지만 새로운 기능이 추가되지는 않았다.\n“두 사람이 바쁜 것 같으니까, 나라도 메일링 리스트에 올라온 버그 패치를 적용해서 김프를 릴리즈해야겠다”\n1997년 2월 김프 공동체의 원활한 소통을 위해 IRC채널이 만들어졌고, 자연스럽게 몇몇 사람이 나서서 프로젝트를 계속 진행시켰다.\n마니시(Manish Singh, yosh)는 릴리스를 맡았고, 안드리안(Adrian Likins)은 서버를 관리하고 김프 캐릭터를 그렸던 래리(Larry Ewing, lewing)와 메튜(Matthew Wilson, msw)외 사람들이 버그를 잡고 새로운 기능을 구현했다.\n“내가 김프의 릴리즈를 맡을께요”\n“내가 서버를 관리하지요”\n“버그는 나에게 맡기고”\n“내가 새로운 기능을 구현하지”\n1998년 6월 2일 마침내 김프 1.0이 정식으로 출시되었고, 이 때 부터 GTK+는 별도의 프로젝트로 독립을 한다. 오늘날의 김프 #  김프 2.0 (출처: 위키피디아)\n현재 김프는 리눅스, 맥OSX, 윈도, BSD, 솔라리스를 지원하며 대표적인 오픈소스 그래픽 소프트웨어로 자리잡았다.\n그놈(GNOME) 프로젝트 #  일부 김프 개발자가 독자적인 프로젝트로 GTK+를 분리시켰고 이를 기반으로 또다른 오픈소스 데스크탑 프로젝트인 그놈(GNOME) 프로젝트가 탄생하게 된다. 이에 대한 이야기는 다음에 소개할 예정이다.\n두 사람은 이후 구글에서 함께 일하면서 구글 파일시스템, 서블릿 엔진 등 개발에 참여했고 Viewfinder라는 스타업을 만들어 스퀘어에 매각했다. 현재는 함께 새로운 스타트업에서 구글 빅테이블의 오픈소스 버전인 CockroachDB를 만들고 있다.\n참고 #   A Brief (and Ancient) History of GIMP, gimp.org 김프, 위키피디아 (한국어, 영문) 인터뷰 기사, 1997년 1월, https://www.xach.com/gg/1997/1/profile/1/ 김프 튜토리얼(링크)  "});index.add({'id':9,'href':'/docs/gnome_history/gnome_kr_home/','title':"Index",'section':"Docs",'content':"그놈 한국 홈페이지 변천사 #  2007년 2월 20일 #  https://web.archive.org/web/20070220235717/http://gnome.or.kr/\n2006년 7월 11일 #  2003년 10월 30일 #  2002년 3월 30일 #  https://web.archive.org/web/20020524140742/http://gnome.or.kr/\n"});index.add({'id':10,'href':'/docs/gnome_history/korea/','title':"Index",'section':"Docs",'content':"그놈 한국이 걸어온 길 #  작성 중\u0026hellip;\n"});index.add({'id':12,'href':'/docs/projects/gnome-kr-l10n/','title':"Gnome Kr L10n",'section':"Projects",'content':"그놈 한글화 프로젝트 #  그놈 한글화 프로젝트는 그놈 프로젝트에서 개발하는 애플리케이션을 한글화하는 프로젝트입니다. 여러분이 그놈을 기반으로한 우분투 리눅스를 설치할 때, 한글을 선택하면 모든 메뉴가 한글로 나타나는데, 이 프로젝트의 결과물입니다. 현재 프로젝트 멤버는 다음 같습니다.\n 감독자: 류창우(Changwoo Ryu) 검토자: 조성호(Seong-ho Cho) 번역  맹진영(Jinyeong Maeng) AlexKodala 엄지용(Jeeyong Um) 문관경(Gwan-gyeong Mun) 신현수(Hyunsu Shin) 성대현(DaeHyun Sung)    아직도 한글화할 부분이 많습니다. 참여를 원하는 분은 아래 프로젝트 페이지를 방문하시기 바랍니다.\n https://l10n.gnome.org/teams/ko/  "});})();